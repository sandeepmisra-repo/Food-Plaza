package flow;

import java.security.cert.X509Certificate;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSession;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;

import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;

import javax.net.ssl.X509TrustManager;

import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
import org.apache.http.conn.ssl.SSLContexts;
import org.apache.http.conn.ssl.TrustStrategy;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.impl.nio.client.CloseableHttpAsyncClient;
import org.apache.http.impl.nio.client.HttpAsyncClients;
import org.json.JSONObject;

import com.avaya.sce.runtimecommon.IVariableField;
import com.mashape.unirest.http.HttpResponse;
import com.mashape.unirest.http.Unirest;

/**
 * A basic servlet which allows a user to define their code, generate any
 * output, and to select where to transition to next. Last generated by
 * Orchestration Designer at: 2019-JUN-24 09:12:38 AM
 */
public class SMS extends com.avaya.sce.runtime.BasicServlet {

	// {{START:CLASS:FIELDS
	// }}END:CLASS:FIELDS

	/**
	 * Default constructor Last generated by Orchestration Designer at: 2019-JUN-24
	 * 09:12:38 AM
	 */
	public SMS() {
		// {{START:CLASS:CONSTRUCTOR
		super();
		// }}END:CLASS:CONSTRUCTOR
	}

	/**
	 * This method allows for custom integration with other Java components. You may
	 * use Java for sophisticated logic or to integrate with custom connectors (i.e.
	 * JMS, custom web services, sockets, XML, JAXB, etc.)
	 *
	 * Any custom code added here should work as efficiently as possible to prevent
	 * delays. It's important to design your callflow so that the voice browser
	 * (Experienve Portal/IR) is not waiting too long for a response as this can
	 * lead to a poor caller experience. Additionally, if the response to the client
	 * voice browser exceeds the configured timeout, the platform may throw an
	 * "error.badfetch".
	 *
	 * Using this method, you have access to all session variables through the
	 * SCESession object.
	 *
	 * The code generator will *** NOT *** overwrite this method in the future. Last
	 * generated by Orchestration Designer at: 2019-JUN-24 09:12:38 AM
	 */

	private CloseableHttpAsyncClient createSSLClient() {
		TrustStrategy acceptingTrustStrategy = new TrustStrategy() {

			@Override
			public boolean isTrusted(X509Certificate[] arg0, String arg1) throws CertificateException {
				return true;
			}
		};

		SSLContext sslContext = null;
		try {
			sslContext = SSLContexts.custom().loadTrustMaterial(null, acceptingTrustStrategy).build();
		} catch (Exception e) {
			LogFileIn.stringLogBuilder.append("Could not create SSLContext");
		}

		return HttpAsyncClients.custom().setHostnameVerifier(SSLConnectionSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER)
				.setSSLContext(sslContext).build();
	}
	public String replace(String str) {
	    String[] words = str.split(" ");
	    StringBuilder sentence = new StringBuilder(words[0]);

	    for (int i = 1; i < words.length; ++i) {
	        sentence.append("%20");
	        sentence.append(words[i]);
	    }

	    return sentence.toString();
	}

	public void servletImplementation(com.avaya.sce.runtimecommon.SCESession mySession) {

		// TODO: Add your code here!
//		Date date = new Date();// yyddMMhhmmss
//		SimpleDateFormat sdate = new SimpleDateFormat("dd-MM-yy");
//		SimpleDateFormat stime = new SimpleDateFormat("HH:mm:ss");
//		String formattedDate = sdate.format(date);
//		String formattedTime = stime.format(date);
//		String TimeStamp = formattedDate + "\t" + formattedTime;
//
//		String mobileNumber = mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_ANI)
//				.getStringValue();
//		
//		String NewMobileNumber = mobileNumber.substring(1);
//		String place = mySession.getVariableField(IProjectVariables.OUT_GOOGLE_ASR).toString();
//		String message = "Your Order will be delivered to " + place + " within 2 - 3 hours";
//		String newMessage = replace(message);
//		LogFileIn.stringLogBuilder.append("\r\n" + TimeStamp + "\t" + "[Mobile Number , Message To Send]     -->");
//		LogFileIn.stringLogBuilder.append(mobileNumber + "\t " + message);
//
//		try {
//
//			TrustManager[] trustAllCerts = new TrustManager[] { new X509TrustManager() {
//				public java.security.cert.X509Certificate[] getAcceptedIssuers() {
//					return null;
//				}
//
//				public void checkClientTrusted(X509Certificate[] certs, String authType) {
//				}
//
//				public void checkServerTrusted(X509Certificate[] certs, String authType) {
//				}
//
//			} };
//
//			SSLContext sslcontext = SSLContext.getInstance("SSL");
//			sslcontext.init(null, trustAllCerts, new java.security.SecureRandom());
//			HttpsURLConnection.setDefaultSSLSocketFactory(sslcontext.getSocketFactory());
//			SSLConnectionSocketFactory sslsf = new SSLConnectionSocketFactory(sslcontext);
//			CloseableHttpClient httpclient = HttpClients.custom().setSSLSocketFactory(sslsf).build();
//			Unirest.setHttpClient(httpclient);
//
//			HttpResponse response = Unirest.get(
//					"https://www.fast2sms.com/dev/bulk?authorization=gx3DnF1UdqwJCQLEpASWasyN695bh2KM7mfjoOzlvZ0IVrBXkHEtlHMZ0NYSsfxrGhJ6Agzn49ja1Oik&sender_id=FSTSMS&message="
//							+ newMessage + "&language=english&route=p&numbers=" + NewMobileNumber+"")
//					.header("cache-control", "no-cache").asString();
//			JSONObject myObject = new JSONObject(response);
////			long status = (long) myObject.get("status");
////			System.out.println(status);
////			String body = ((String) myObject.get("body"));
////			System.out.println(body);
//			LogFileIn.stringLogBuilder.append("\r\n" + TimeStamp + "\t" + "[Response From SMS]     -->");
////			LogFileIn.stringLogBuilder.append(status + " " + body);
//			LogFileIn.stringLogBuilder.append(myObject);
//			LogFileIn.stringLogBuilder.append("\n");
//
//		} catch (Exception ex) {
//			LogFileIn.stringLogBuilder.append("\r\n" + TimeStamp + "\t" + "[Exception In SMS API]     -->");
//			LogFileIn.stringLogBuilder.append(ex.toString());
//			System.out.print(ex.getMessage());
//		}

		IVariableField reset = mySession.getVariableField(IProjectVariables.SEND_SMS);
		reset.setValue("0");

	}

	/**
	 * Builds the list of branches that are defined for this servlet object.
	 * This list is built automatically by defining Goto nodes in the call flow editor.
	 * It is the programmer's responsibilty to provide at least one enabled Goto.<BR>
	 *
	 * The user should override updateBranches() to determine which Goto that the
	 * framework will activate.  If there is not at least one enabled Goto item, 
	 * the framework will throw a runtime exception.<BR>
	 *
	 * This method is generated automatically and changes to it may
	 * be overwritten next time code is generated.  To modify the list
	 * of branches for the flow item, override:
	 *     <code>updateBranches(Collection branches, SCESession mySession)</code>
	 *
	 * @return a Collection of <code>com.avaya.sce.runtime.Goto</code>
	 * objects that will be evaluated at runtime.  If there are no gotos
	 * defined in the Servlet node, then this returns null.
	 * Last generated by Orchestration Designer at: 2019-AUG-28  10:11:33 AM
	 */
	public java.util.Collection getBranches(com.avaya.sce.runtimecommon.SCESession mySession) {
		java.util.List list = null;
		com.avaya.sce.runtime.Goto aGoto = null;
		list = new java.util.ArrayList(1);

		aGoto = new com.avaya.sce.runtime.Goto("ThankU", 0, true, "Default");
		list.add(aGoto);

		return list;
	}
}
